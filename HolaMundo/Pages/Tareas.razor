@page "/tareas"
@using System.Text.Json
@inject IJSRuntime JS

<PageTitle>Gestor de Tareas</PageTitle>

<style>
    /* Fonts y Colores */
    :root {
        --default-font: "Roboto", system-ui, sans-serif;
        --heading-font: "Nunito", sans-serif;
        --nav-font: "Inter", sans-serif;
        --background-color: #ffffff;
        --default-color: #3d4348;
        --heading-color: #3e5055;
        --accent-color: #388da8;
        --surface-color: #ffffff;
        --contrast-color: #ffffff;
    }

    .container-tareas {
        background: var(--background-color);
        margin: 20px;
        padding: 20px;
        border-radius: 10px;
        text-align: center;
        box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.15);
        color: var(--default-color);
    }

    .tarea-input {
        margin-bottom:10px;
        width: 100%;
        padding: 10px;
        border: 1px solid var(--accent-color);
        border-radius: 5px;
        font-family: var(--default-font);
        font-size: 16px;
    }

    .lista-tareas {
        margin-top: 20px;
        text-align: left;
    }

    .tarea-item {
        background: var(--surface-color);
        padding: 10px;
        margin-bottom: 10px;
        border-radius: 5px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
    }

    .tarea-completada {
        text-decoration: line-through;
        color: green;
    }

    .tarea-botones {
        display: flex;
        gap: 10px;
    }

    .boton-editar, .boton-eliminar{
        background: none;
        border: 1px solid var(--accent-color);
        padding: 5px 10px;
        border-radius: 5px;
        cursor: pointer;
        font-family: var(--nav-font);
    }

        .boton-editar:hover{
            background-color: var(--accent-color);
            color: var(--contrast-color);
        }

        .boton-eliminar:hover {
            background-color: red;
            color: white;
        }

    .boton-completar {
        background: var(--surface-color);
        border: 2px solid var(--accent-color);
        color: var(--heading-color);
        border-radius: 50%;
        width: 36px;
        height: 36px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 20px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .boton-completar.completado {
            background: var(--accent-color);
            color: var(--contrast-color);
            border: 2px solid var(--accent-color);
        }

    .boton-filtro, .boton-agregar {
        background: none;
        border: 2px solid var(--accent-color);
        padding: 8px 15px;
        border-radius: 5px;
        cursor: pointer;
        font-family: var(--nav-font);
        color: var(--heading-color);
        transition: all 0.3s ease;
    }

        .boton-agregar:hover {
            background: var(--accent-color);
            color: var(--contrast-color);
        }

        .boton-filtro.seleccionado {
            background: var(--accent-color);
            color: var(--contrast-color);
        }

    .filtros {
        margin-top: 10px;
        display: flex;
        justify-content: center;
        gap: 10px;
    }

    /* Diseño Responsive */
    @@media (max-width: 600px) {
        .container-tareas
        {
            padding: 15px;
        }

        .tarea-item {
            flex-direction: column;
            align-items: center;
            text-align: center;
        }

        .tarea-botones {
            flex-direction: row;
            justify-content: center;
            width: 100%;
        }

        .filtros {
            flex-direction: column;
            align-items: center;
            gap: 5px;
        }

        .boton-filtro {
            width: 60%;
            text-align: center;
            padding: 10px;
        }

    }
</style>

<div class="container-tareas">
    <h2>Gestor de Tareas</h2>
    <input class="tarea-input" placeholder="Nueva tarea..." @bind="nuevaTarea" />
    <button class="boton-agregar" @onclick="AgregarTarea">Agregar Tarea</button>

    <div class="filtros">
        <button class="boton-filtro @(filtroActual == null ? "seleccionado" : "")" @onclick="() => FiltrarTareas(null)">Todas</button>
        <button class="boton-filtro @(filtroActual == true ? "seleccionado" : "")" @onclick="() => FiltrarTareas(true)">Completadas</button>
        <button class="boton-filtro @(filtroActual == false ? "seleccionado" : "")" @onclick="() => FiltrarTareas(false)">Pendientes</button>
    </div>

    <div class="lista-tareas">
        <h3>Lista de Tareas</h3>
        <div>
            @foreach (var tarea in tareasFiltradas.OrderBy(t => t.Completada))
            {
                <div class="tarea-item">
                    <span class="@(tarea.Completada ? "tarea-completada" : "")">@tarea.Descripcion</span>
                    <div class="tarea-botones">
                        <button class="boton-completar @(tarea.Completada ? "completado" : "")" @onclick="() => MarcarTarea(tarea)">✔</button>
                        <button class="boton-editar" @onclick="() => EditarTarea(tarea)">Editar</button>
                        <button class="boton-eliminar" @onclick="() => EliminarTarea(tarea)">Eliminar</button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<Tarea> tareas = new List<Tarea>();
    private List<Tarea> tareasFiltradas = new List<Tarea>();
    private string nuevaTarea = string.Empty;
    private bool? filtroActual = null;

    protected override async Task OnInitializedAsync()
    {
        await CargarTareas();
    }



    private async Task AgregarTarea()
    {
        if (!string.IsNullOrWhiteSpace(nuevaTarea))
        {
            tareas.Add(new Tarea { Descripcion = nuevaTarea, Completada = false });
            await GuardarTareas();
            nuevaTarea = string.Empty;
            FiltrarTareas(filtroActual);
        }
    }

    private async Task CargarTareas()
    {
        var tareasGuardadas = await JS.InvokeAsync<string>("localStorage.getItem", "tareas");
        if (!string.IsNullOrEmpty(tareasGuardadas))
        {
            tareas = JsonSerializer.Deserialize<List<Tarea>>(tareasGuardadas) ?? new List<Tarea>();
        }
        FiltrarTareas(null);
    }

    private async Task GuardarTareas()
    {
        await JS.InvokeVoidAsync("localStorage.setItem", "tareas", JsonSerializer.Serialize(tareas));
    }

    private void FiltrarTareas(bool? completadas)
    {
        filtroActual = completadas;
        tareasFiltradas = completadas == null ? tareas : tareas.Where(t => t.Completada == completadas).ToList();
    }

    private async Task MarcarTarea(Tarea tarea)
    {
        tarea.Completada = !tarea.Completada;
        await GuardarTareas();
        FiltrarTareas(filtroActual);
    }

    private async Task EditarTarea(Tarea tarea)
    {
        nuevaTarea = tarea.Descripcion;
        tareas.Remove(tarea);
        await GuardarTareas();
    }

    private async Task EliminarTarea(Tarea tarea)
    {
        tareas.Remove(tarea);
        await GuardarTareas();
        FiltrarTareas(filtroActual);
    }

    private class Tarea
    {
        public string Descripcion { get; set; } = string.Empty;
        public bool Completada { get; set; }
    }
}
